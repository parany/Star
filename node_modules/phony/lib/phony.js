(function() {
  var FILE_SUFFIX, HOMEDIR, IS_COFFEE, IS_INSTRUMENTED, LIB_DIR, PHONY_DATA, Phony,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HOMEDIR = __dirname + "/..";

  IS_COFFEE = process.argv[0].indexOf("coffee") >= 0;

  IS_INSTRUMENTED = (require('fs')).existsSync(HOMEDIR + '/lib-cov');

  LIB_DIR = IS_INSTRUMENTED ? HOMEDIR + "/lib-cov" : HOMEDIR + "/lib";

  FILE_SUFFIX = IS_COFFEE ? ".coffee" : ".js";

  PHONY_DATA = LIB_DIR + "/phony-data" + FILE_SUFFIX;

  Phony = (function() {

    function Phony() {
      this.uri = __bind(this.uri, this);
      this.file_path_and_name = __bind(this.file_path_and_name, this);
      this.file_name = __bind(this.file_name, this);
      this.file_path = __bind(this.file_path, this);
      this.email_address = __bind(this.email_address, this);
      this.username = __bind(this.username, this);
      this._word = __bind(this._word, this);
      this.host_name = __bind(this.host_name, this);
      this.domain_name = __bind(this.domain_name, this);
      this._title_case = __bind(this._title_case, this);
      this.lorem_title = __bind(this.lorem_title, this);
      this.title = __bind(this.title, this);
      this.lorem_paragraphs = __bind(this.lorem_paragraphs, this);
      this.lorem_paragraph = __bind(this.lorem_paragraph, this);
      this.lorem_sentences = __bind(this.lorem_sentences, this);
      this.lorem_sentence = __bind(this.lorem_sentence, this);
      this.lorem_words = __bind(this.lorem_words, this);
      this.lorem_word = __bind(this.lorem_word, this);
      this.words = __bind(this.words, this);
      this.word = __bind(this.word, this);
      this.letters = __bind(this.letters, this);
      this.letter = __bind(this.letter, this);
      this.city_state_zip = __bind(this.city_state_zip, this);
      this.city_state = __bind(this.city_state, this);
      this.zip_code = __bind(this.zip_code, this);
      this.postal_code = __bind(this.postal_code, this);
      this.state = __bind(this.state, this);
      this.city = __bind(this.city, this);
      this.street_address = __bind(this.street_address, this);
      this.street = __bind(this.street, this);
      this.name = __bind(this.name, this);
      this.first_name = __bind(this.first_name, this);
      this.female_name = __bind(this.female_name, this);
      this.female_first_name = __bind(this.female_first_name, this);
      this.male_name = __bind(this.male_name, this);
      this.male_first_name = __bind(this.male_first_name, this);
      this.surname = __bind(this.surname, this);
    }

    Phony.prototype.data = require(PHONY_DATA).data;

    Phony.prototype.re = function(a) {
      return a[Math.floor(Math.random() * a.length)];
    };

    Phony.prototype.ri = function(min, max) {
      return Math.floor(this.rf(min, max));
    };

    Phony.prototype.rf = function(min, max) {
      var delta;
      if (!(max != null)) {
        max = min;
        min = 0;
      }
      delta = max - min;
      return min + Math.random() * delta;
    };

    Phony.prototype.rb = function(t, f) {
      if (t == null) t = 1;
      if (f == null) f = 1;
      return this.ri(t + f) <= t;
    };

    Phony.prototype.rs = function(a, b) {
      var e, i, sum, val, _i, _len, _len2;
      sum = 0;
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        e = a[_i];
        sum += e;
      }
      val = Math.random() * sum;
      for (i = 0, _len2 = a.length; i < _len2; i++) {
        e = a[i];
        val -= e;
        if (val <= 0) {
          if (b != null) {
            return b[i];
          } else {
            return i;
          }
        }
      }
      throw "Should never get here";
    };

    Phony.prototype.options = {
      min_street_number: 10,
      max_street_number: 9999,
      street_name_prefix_frequency: 0.75,
      min_sentences_per_paragraph: 3,
      max_sentences_per_paragraph: 6,
      male_female_ratio: [1, 1]
    };

    Phony.prototype.surname = function() {
      return this.re(this.data.NAMES_US_SURNAME);
    };

    Phony.prototype.male_first_name = function() {
      return this.re(this.data.NAMES_US_MALE);
    };

    Phony.prototype.male_name = function(opts) {
      if (opts == null) opts = {};
      switch (opts['return']) {
        case 'array':
          return [this.male_first_name(), this.surname()];
        case 'map':
        case 'object':
          return {
            first_name: this.male_first_name(),
            surname: this.surname()
          };
        default:
          return "" + (this.male_first_name()) + " " + (this.surname());
      }
    };

    Phony.prototype.female_first_name = function() {
      return this.re(this.data.NAMES_US_FEMALE);
    };

    Phony.prototype.female_name = function(opts) {
      if (opts == null) opts = {};
      switch (opts['return']) {
        case 'array':
          return [this.female_first_name(), this.surname()];
        case 'map':
        case 'object':
          return {
            first_name: this.female_first_name(),
            surname: this.surname()
          };
        default:
          return "" + (this.female_first_name()) + " " + (this.surname());
      }
    };

    Phony.prototype.first_name = function() {
      if (this.rs(this.options.male_female_ratio) === 0) {
        return this.male_first_name();
      } else {
        return this.female_first_name();
      }
    };

    Phony.prototype.name = function(opts) {
      if (opts == null) opts = {};
      switch (opts['return']) {
        case 'array':
          return [this.first_name(), this.surname()];
        case 'map':
        case 'object':
          return {
            first_name: this.first_name(),
            surname: this.surname()
          };
        default:
          return "" + (this.first_name()) + " " + (this.surname());
      }
    };

    Phony.prototype.street = function() {
      var str;
      str = "" + (this.re(this.data.STREET_NAMES)) + " " + (this.re(this.data.STREET_NAME_SUFFIX));
      if (this.rs([this.options.street_name_prefix_frequency, 1 - this.options.street_name_prefix_frequency]) === 0) {
        str = "" + (this.re(this.data.STREET_NAME_PREFIXES)) + " " + str;
      }
      return str;
    };

    Phony.prototype.street_address = function() {
      return "" + (this.ri(this.options.min_street_number, this.options.max_street_number + 1)) + " " + (this.street());
    };

    Phony.prototype.city = function(opts) {
      if (opts == null) opts = {};
      if (opts.state != null) {
        return this.re(Object.keys(this.data.GEO.US[opts.state]));
      } else {
        return this.re(this.data.CITIES);
      }
    };

    Phony.prototype.state = function() {
      return this.re(this.data.STATES);
    };

    Phony.prototype.postal_code = function(opts) {
      if (opts == null) opts = {};
      if ((opts.state != null) && (opts.city != null)) {
        return this.re(this.data.GEO.US[opts.state][opts.city]);
      } else {
        return this.re(this.data.POSTAL_CODES);
      }
    };

    Phony.prototype.zip_code = function(opts) {
      return this.postal_code(opts);
    };

    Phony.prototype.city_state = function(opts) {
      var city, state;
      if (opts == null) opts = {};
      state = this.state();
      city = this.city({
        state: state
      });
      switch (opts['return']) {
        case 'array':
          return [city, state];
        case 'map':
        case 'object':
          return {
            city: city,
            state: state
          };
        default:
          return "" + city + " " + state;
      }
    };

    Phony.prototype.city_state_zip = function(opts) {
      var city, state, zip;
      if (opts == null) opts = {};
      state = this.state();
      city = this.city({
        state: state
      });
      zip = this.postal_code({
        state: state,
        city: city
      });
      switch (opts['return']) {
        case 'array':
          return [city, state, zip];
        case 'map':
        case 'object':
          return {
            city: city,
            state: state,
            postal_code: zip
          };
        default:
          return "" + city + " " + state + " " + zip;
      }
    };

    Phony.prototype.letter = function() {
      return this.letters(1);
    };

    Phony.prototype.letters = function(n, opts) {
      var delim, letters;
      if (opts == null) opts = {};
      delim = opts.delimiter != null ? opts.delimiter : '';
      letters = [];
      while (n > 0) {
        letters.push(this.re(this.data.LETTERS));
        n -= 1;
      }
      switch (opts['return']) {
        case 'array':
          return letters;
        default:
          return letters.join(delim);
      }
    };

    Phony.prototype.word = function(opts) {
      return this.words(1, opts);
    };

    Phony.prototype.words = function(n, opts) {
      var words;
      if (opts == null) opts = {};
      words = [];
      while (n > 0) {
        words.push(this.re(this.data.MANY_WORDS));
        n -= 1;
      }
      switch (opts['return']) {
        case 'array':
          return words;
        default:
          return words.join(' ');
      }
    };

    Phony.prototype.lorem_word = function(opts) {
      return this.lorem_words(1, opts);
    };

    Phony.prototype.lorem_words = function(n, opts) {
      var words;
      if (opts == null) opts = {};
      words = [];
      while (n > 0) {
        words.push(this.re(this.data.LOREM_WORDS));
        n -= 1;
      }
      switch (opts['return']) {
        case 'array':
          return words;
        default:
          return words.join(' ');
      }
    };

    Phony.prototype.lorem_sentence = function(opts) {
      return this.lorem_sentences(1, opts);
    };

    Phony.prototype.lorem_sentences = function(n, opts) {
      var sentences;
      if (opts == null) opts = {};
      sentences = [];
      while (n > 0) {
        sentences.push(this.re(this.data.LOREM_LINES));
        n -= 1;
      }
      switch (opts['return']) {
        case 'array':
          return sentences;
        default:
          return sentences.join(' ');
      }
    };

    Phony.prototype.lorem_paragraph = function(opts) {
      return this.lorem_paragraphs(1, opts);
    };

    Phony.prototype.lorem_paragraphs = function(n, opts) {
      var paragraphs;
      if (opts == null) opts = {};
      paragraphs = [];
      while (n > 0) {
        paragraphs.push(this.lorem_sentences(this.ri(this.options.min_sentences_per_paragraph, this.options.min_sentences_per_paragraph + 1)));
        n -= 1;
      }
      switch (opts['return']) {
        case 'array':
          return paragraphs;
        default:
          return paragraphs.join(' ');
      }
    };

    Phony.prototype.title = function(opts) {
      if (opts == null) opts = {};
      return this._title_case(this.words(this.ri(1, 5) + this.ri(2)));
    };

    Phony.prototype.lorem_title = function(opts) {
      if (opts == null) opts = {};
      return this._title_case(this.lorem_words(this.ri(1, 5) + this.ri(2)));
    };

    Phony.prototype._title_case = function(str) {
      return str.replace(/\w\S*/g, function(txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
      });
    };

    Phony.prototype.domain_name = function() {
      var domain;
      domain = this.rs(this.data.TLD_WEIGHTS, this.data.TLDS);
      if (this.data.SLDS[domain] != null) domain = this.re(this.data.SLDS[domain]);
      if (this.rs([1, 7]) === 0) {
        return "" + (this.word()) + (this.word()) + "." + domain;
      } else {
        return "" + (this.word()) + "." + domain;
      }
    };

    Phony.prototype.host_name = function() {
      var domain;
      domain = this.domain_name();
      if (this.rs([2, 3]) === 0) {
        return "" + (this.re(this.data.WEB_HOSTS)) + "." + domain;
      } else {
        return domain;
      }
    };

    Phony.prototype._word = function() {
      return this.re(this.data.NAMISH_WORDS);
    };

    Phony.prototype.username = function() {
      switch (this.rs([6, 1, 1, 1, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1])) {
        case 0:
          return this._word();
        case 1:
          return "" + (this._word()) + (this._word());
        case 2:
          return "" + (this._word()) + "." + (this._word());
        case 3:
          return "" + (this._word()) + "-" + (this._word());
        case 4:
          return "" + (this.letter()) + (this._word());
        case 5:
          return "" + (this.letter()) + "." + (this._word());
        case 6:
          return "" + (this.letter()) + "-" + (this._word());
        case 7:
          return "" + (this.letters(this.ri(1, 3))) + (this._word());
        case 8:
          return "" + (this.letters(this.ri(1, 3))) + "." + (this._word());
        case 9:
          return "" + (this.letters(this.ri(1, 3))) + "-" + (this._word());
        case 10:
          return "" + (this._word()) + (this.letters(this.ri(1.3)));
        case 11:
          return "" + (this._word()) + "." + (this.letters(this.ri(1, 3)));
        case 12:
          return "" + (this._word()) + "-" + (this.letters(this.ri(1, 3)));
        default:
          return this.letters(this.ri(5, 16));
      }
    };

    Phony.prototype.email_address = function() {
      return "" + (this.username()) + "@" + (this.domain_name());
    };

    Phony.prototype.file_path = function() {
      var n, path;
      path = '';
      n = this.ri(1, 4);
      while (n > 0) {
        path += "/" + (this.word());
        n -= 1;
      }
      return path;
    };

    Phony.prototype.file_name = function() {
      switch (this.rs([5, 1])) {
        case 0:
          return "" + (this.word()) + "." + (this.re(this.data.FILE_EXT));
        default:
          return "" + (this.word());
      }
    };

    Phony.prototype.file_path_and_name = function() {
      switch (this.rs([2, 1, 1])) {
        case 0:
          return "" + (this.file_path()) + "/" + (this.file_name());
        case 1:
          return "" + (this.file_path());
        default:
          return "" + (this.file_path()) + "/";
      }
    };

    Phony.prototype.uri = function(opts) {
      var port, ports, schemes, uri;
      if (opts == null) opts = {};
      schemes = opts.schemes != null ? opts.schemes : ['http', 'http', 'http', 'http', 'http', 'https'];
      ports = opts.ports != null ? opts.ports : [null, null, null, null, null, null, 81, 8080];
      uri = "" + (this.re(schemes)) + "://" + (this.host_name());
      port = this.re(ports);
      if (port != null) uri += ":" + port;
      uri += this.rs([3, 1, 1], [this.file_path_and_name(), "/" + (this.file_name()), '/']);
      return uri;
    };

    return Phony;

  })();

  exports.make_phony = function() {
    return new Phony();
  };

}).call(this);
